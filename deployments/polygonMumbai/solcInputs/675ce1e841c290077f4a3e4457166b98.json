{
  "language": "Solidity",
  "sources": {
    "contracts/TrustMart.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\n/// @title  Trust Marketplace\n/// @author Harsh\n/// @notice This contract is a marketplace contract, which will store the listed items\n///         data,buyers data,sellers data and we can buy,sell, products here.\n/// @dev  functions List,buy,withdraw(for the seller),add seller(to become a seller)\npragma solidity ^0.8.17;\n\ncontract TrustMart {\n    //Events\n    event List(string indexed name, uint256 cost, uint256 quantity);\n    event Buy(address indexed buyer, uint256 indexed orderId, uint256 itemId);\n    event SellerAdded(\n        address indexed sellerAddress,\n        string indexed name,\n        uint256 Id\n    );\n    struct Seller {\n        uint256 id;\n        string name;\n    }\n    struct Item {\n        uint256 id;\n        string name;\n        string category;\n        string image;\n        uint256 cost;\n        uint256 rating;\n        uint256 stock;\n        address vendor;\n    }\n    struct Order {\n        uint256 time;\n        Item item;\n    }\n    mapping(uint256 => Item) public items;\n    mapping(address => uint256) public orderCount;\n    mapping(address => mapping(uint256 => Order)) public orders;\n    mapping(address => Seller) public sellers;\n    address private immutable owner;\n    mapping(address => uint256) public addressToAmount;\n    uint256 public numberOfItems;\n\n    constructor() {\n        owner = msg.sender;\n        Seller memory seller = Seller(2000, \"harsh\");\n        sellers[msg.sender] = seller;\n        numberOfItems = 0;\n    }\n\n    function getOwner() public view returns (address) {\n        return owner;\n    }\n\n    //modifier\n    modifier isSeller() {\n        require(\n            msg.sender == owner || sellers[msg.sender].id > 0,\n            \"You are not the seller\"\n        );\n\n        _;\n    }\n\n    //List\n    function list(\n        uint256 _id,\n        string memory _name,\n        string memory _category,\n        string memory _image,\n        uint256 _cost,\n        uint256 _rating,\n        uint256 _stock\n    ) public isSeller {\n        Item memory item = Item(\n            _id,\n            _name,\n            _category,\n            _image,\n            _cost,\n            _rating,\n            _stock,\n            msg.sender\n        );\n        items[_id] = item;\n        emit List(_name, _cost, _stock);\n        numberOfItems++;\n    }\n\n    function getItem(uint256 _id) public view returns (Item memory) {\n        return items[_id];\n    }\n\n    // Add seller\n    function becomeSeller(uint256 _id, string memory _name) public {\n        Seller memory seller = Seller(_id, _name);\n        sellers[msg.sender] = seller;\n        emit SellerAdded(msg.sender, _name, _id);\n    }\n\n    function getSellerInfo(\n        address _address\n    ) public view returns (Seller memory) {\n        return sellers[_address];\n    }\n\n    //buy\n    function buy(uint256 _id) public payable {\n        require(msg.value >= items[_id].cost, \"You dont' have enough Crypto\");\n        require(items[_id].stock > 0, \"Item out of stock\");\n        items[_id].stock = items[_id].stock - 1;\n        orderCount[msg.sender]++;\n        orders[msg.sender][orderCount[msg.sender]] = Order(\n            block.timestamp,\n            items[_id]\n        );\n        addressToAmount[items[_id].vendor] =\n            addressToAmount[items[_id].vendor] +\n            msg.value;\n        emit Buy(msg.sender, orderCount[msg.sender], _id);\n        numberOfItems--;\n    }\n\n    //withdraw\n    function withdraw() public payable isSeller {\n        uint256 amount = addressToAmount[msg.sender];\n        addressToAmount[msg.sender] = 0;\n        (bool success, ) = (msg.sender).call{value: amount}(\"\");\n\n        require(success);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}